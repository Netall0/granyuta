import dotenv from 'dotenv';
dotenv.config({ path: './config/.env' });
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import path from 'path';
import { fileURLToPath } from 'url';
import sqlite3 from 'sqlite3';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import compression from 'compression';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
    contentSecurityPolicy: {
        useDefaults: false,
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: [
                "'self'", 
                "'unsafe-inline'",
                "https://api-maps.yandex.ru",
                "https://yandex.st",
                "https://*.yandex.ru",
                "https://*.yandex.net"
            ],
            scriptSrcAttr: ["'self'", "'unsafe-inline'"],
            styleSrc: [
                "'self'", 
                "'unsafe-inline'", 
                "https://fonts.googleapis.com",
                "https://yandex.st",
                "https://*.yandex.ru"
            ],
            fontSrc: [
                "'self'", 
                "https://fonts.gstatic.com",
                "https://yandex.st"
            ],
            imgSrc: [
                "'self'", 
                "data:", 
                "https:",
                "https://*.yandex.ru",
                "https://*.yandex.net",
                "https://core-renderer-tiles.maps.yandex.net"
            ],
            connectSrc: [
                "'self'",
                "https://api-maps.yandex.ru",
                "https://*.yandex.ru",
                "https://*.yandex.net"
            ],
            frameSrc: [
                "'self'", 
                "https://yandex.ru", 
                "https://*.yandex.ru"
            ],
            workerSrc: ["'self'", "blob:"]
        },
    },
}));

// Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});
app.use('/api/', limiter);

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const corsOptions = {
    origin: process.env.CORS_ORIGIN || '*',
    credentials: true,
    optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'public'), {
    maxAge: '1d',
    etag: true
}));

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const log = (level, message, data = {}) => {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`, data);
};

log('info', '–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞', { 
    nodeEnv: process.env.NODE_ENV || 'development',
    port: process.env.PORT || 3000
});

if (!TELEGRAM_BOT_TOKEN) {
    log('error', 'TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}
if (!TELEGRAM_CHAT_ID) {
    log('error', 'TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    const start = Date.now();
    res.on('finish', () => {
        const duration = Date.now() - start;
        log('info', `${req.method} ${req.path}`, {
            status: res.statusCode,
            duration: `${duration}ms`,
            ip: req.ip
        });
    });
    next();
});

app.post('/api/feedback', async (req, res) => {
    try {
        const { name, phone, email, message, price, size, extras } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!name || !phone) {
            return res.status(400).json({ error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        const text = `\nüî• –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê!\n\nüë§ –ö–ª–∏–µ–Ω—Ç: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüìß Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\nüìä –†–ê–°–ß–ï–¢:\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${price}\nüìè –†–∞–∑–º–µ—Ä: ${size}\n‚ö° –û–ø—Ü–∏–∏: ${extras}\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${message || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n‚è∞ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        if (!response.ok || !result.ok) {
            log('error', '–û—à–∏–±–∫–∞ Telegram API', result);
            return res.status(500).json({ ok: false, error: result.description || '–û—à–∏–±–∫–∞ Telegram API' });
        }
        
        log('info', '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram', { name, phone });
        res.json({ ok: true });
    } catch (e) {
        log('error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram', { error: e.message });
        res.status(500).json({ ok: false, error: e.message });
    }
});

// API: –ö–∞—Ç–∞–ª–æ–≥ –±–∞–Ω—å –∏–∑ –ë–î —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
let catalogCache = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

app.get('/api/catalog', (req, res) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (catalogCache && cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_DURATION) {
        return res.json(catalogCache);
    }
    
    const dbPath = path.resolve(__dirname, 'db', 'baths.db');
    const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
        if (err) {
            log('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', { error: err.message });
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î' });
        }
        
        db.all('SELECT * FROM bathhouses ORDER BY price ASC', (err, rows) => {
            if (err) {
                log('error', '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î', { error: err.message });
                db.close();
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î' });
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
            const processedRows = rows.map(row => {
                let images = [];
                try {
                    // –ü–∞—Ä—Å–∏–º –ø–æ–ª–µ image –∫–∞–∫ JSON-–º–∞—Å—Å–∏–≤
                    if (row.image) {
                        images = JSON.parse(row.image);
                    }
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    images = row.image ? [row.image] : [];
                }
                
                return {
                    ...row,
                    images: images, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ images
                    specs: row.specs ? JSON.parse(row.specs) : [],
                    features: row.features ? JSON.parse(row.features) : []
                };
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            catalogCache = processedRows;
            cacheTimestamp = Date.now();
            
            res.json(processedRows);
            db.close();
        });
    });
});

// API: –ö–æ–Ω—Ñ–∏–≥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
app.get('/api/calculator-config', (req, res) => {
    res.json({
        sizes: {
            '200000': { name: '2–º √ó 4–º', price: 200000 },
            '250000': { name: '2–º √ó 5–º', price: 250000 },
            '300000': { name: '2–º √ó 6–º', price: 300000 },
            '350000': { name: '2.5–º √ó 6–º', price: 350000 }
        },
        materials: {
            '1': { name: '–ö–µ–¥—Ä —Å–∏–±–∏—Ä—Å–∫–∏–π', multiplier: 1 },
            '1.3': { name: '–ö–µ–¥—Ä –∫–∞–Ω–∞–¥—Å–∫–∏–π', multiplier: 1.3 },
            '0.8': { name: '–õ–∏–ø–∞', multiplier: 0.8 },
            '0.9': { name: '–û—Å–∏–Ω–∞', multiplier: 0.9 }
        },
        stoves: {
            '0': { name: '–ë–µ–∑ –ø–µ—á–∏', price: 0 },
            '50000': { name: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø–µ—á—å', price: 50000 },
            '80000': { name: '–î—Ä–æ–≤—è–Ω–∞—è –ø–µ—á—å', price: 80000 },
            '120000': { name: '–ü—Ä–µ–º–∏—É–º –¥—Ä–æ–≤—è–Ω–∞—è', price: 120000 }
        },
        extras: {
            delivery: { name: '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏)', price: 0}
        }
    });
});

// Health check endpoint
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
    res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    log('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', { error: err.message, stack: err.stack });
    res.status(500).json({ 
        error: process.env.NODE_ENV === 'production' ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' : err.message 
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    log('info', `–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});