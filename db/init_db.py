from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, Bathhouse
import os
import json

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏ —Å Avito"""
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DB_PATH = os.path.join(os.path.dirname(__file__), 'baths.db')
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    engine = create_engine(f'sqlite:///{DB_PATH}', echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        Base.metadata.create_all(engine)
        print('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã')
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        deleted = session.query(Bathhouse).delete()
        print(f'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {deleted}')
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–Ω–∏ —Å Avito
        baths = [
            Bathhouse(
                name='–ë–∞–Ω—è –ö–≤–∞–¥—Ä–æ',
                description='–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–Ω—è –ö–≤–∞–¥—Ä–æ. –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è, —É—é—Ç–Ω–∞—è, –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.',
                price=295000,
                image='image/banyakvadro.webp',
                tags='–±–∞–Ω—è,–∫–≤–∞–¥—Ä–æ',
                specs=json.dumps(['–ö–≤–∞–¥—Ä–æ —Ñ–æ—Ä–º–∞', '–ì–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ']),
                features=json.dumps(['–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å', '–£—é—Ç'])
            ),
            Bathhouse(
                name='–ö—Ä—ã–ª—å—Ü–æ, —Å—Ç—É–ø–µ–Ω–∏',
                description='–ö—Ä—ã–ª—å—Ü–æ –∏ —Å—Ç—É–ø–µ–Ω–∏ –¥–ª—è –±–∞–Ω–∏. –ü—Ä–æ—á–Ω–æ–µ, —É–¥–æ–±–Ω–æ–µ, –±—ã—Å—Ç—Ä–æ–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ.',
                price=7000,
                image='',
                tags='–∫—Ä—ã–ª—å—Ü–æ,—Å—Ç—É–ø–µ–Ω–∏',
                specs=json.dumps(['–ü—Ä–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ']),
                features=json.dumps(['–£–¥–æ–±—Å—Ç–≤–æ', '–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞'])
            ),
            Bathhouse(
                name='–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º/–±–∞–Ω—è –∫–≤–∞–¥—Ä–æ/–±—ã—Ç–æ–≤–∫–∞',
                description='–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º, –±–∞–Ω—è –∏–ª–∏ –±—ã—Ç–æ–≤–∫–∞. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç.',
                price=225000,
                image='image/gostdom.webp',
                tags='–¥–æ–º,–±–∞–Ω—è,–∫–≤–∞–¥—Ä–æ,–±—ã—Ç–æ–≤–∫–∞',
                specs=json.dumps(['–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–ö–µ–¥—Ä —Å–∏–±–∏—Ä—Å–∫–∏–π']),
                features=json.dumps(['–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º', '–ë–∞–Ω—è', '–ë—ã—Ç–æ–≤–∫–∞'])
            ),
            Bathhouse(
                name='–ë–∞–Ω—è –±–æ—á–∫–∞ –∫–≤–∞–¥—Ä–æ 4 –º–µ—Ç—Ä–∞',
                description='–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –±–∞–Ω—è-–±–æ—á–∫–∞ –∫–≤–∞–¥—Ä–æ 4 –º–µ—Ç—Ä–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ.',
                price=380000,
                image='image/kvadro4m.webp',
                tags='–±–∞–Ω—è,–∫–≤–∞–¥—Ä–æ,–±–æ—á–∫–∞',
                specs=json.dumps(['4 –º–µ—Ç—Ä–∞', '–ö–≤–∞–¥—Ä–æ —Ñ–æ—Ä–º–∞']),
                features=json.dumps(['–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è', '–ü—Ä–µ–º–∏—É–º –æ—Ç–¥–µ–ª–∫–∞'])
            ),
            Bathhouse(
                name='–ë–∞–Ω—è –∏–∑ –∫–µ–¥—Ä–∞ 5 –º–µ—Ç—Ä–æ–≤',
                description='–ë–∞–Ω—è –∏–∑ –∫–µ–¥—Ä–∞ 5 –º–µ—Ç—Ä–æ–≤. –≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å, –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å, –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ.',
                price=435000,
                image='image/iskedra5m.webp',
                tags='–±–∞–Ω—è,–∫–µ–¥—Ä',
                specs=json.dumps(['5 –º–µ—Ç—Ä–æ–≤', '–ö–µ–¥—Ä']),
                features=json.dumps(['–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å', '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ'])
            ),
            Bathhouse(
                name='–ë–∞–Ω—è –±–æ—á–∫–∞ 2 –º–µ—Ç—Ä–∞',
                description='–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –±–∞–Ω—è-–±–æ—á–∫–∞ 2 –º–µ—Ç—Ä–∞. –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤.',
                price=225000,
                image='',
                tags='–±–∞–Ω—è,–±–æ—á–∫–∞',
                specs=json.dumps(['2 –º–µ—Ç—Ä–∞']),
                features=json.dumps(['–ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å', '–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤'])
            ),
        ]
        session.add_all(baths)
        session.commit()
        print(f'üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(baths)} –∑–∞–ø–∏—Å–µ–π')
        total_count = session.query(Bathhouse).count()
        print(f'üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {total_count}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}')
        session.rollback()
        raise
    finally:
        session.close()

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    DB_PATH = os.path.join(os.path.dirname(__file__), 'baths.db')
    engine = create_engine(f'sqlite:///{DB_PATH}', echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        print('\nüìã –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã bathhouses:')
        print('-' * 80)
        
        for bath in session.query(Bathhouse).all():
            print(f"ID: {bath.id}")
            print(f"Name: {bath.name}")
            print(f"Price: {bath.price:,} ‚ÇΩ")
            print(f"Image: {bath.image}")
            print(f"Tags: {bath.tags}")
            print(f"Description: {bath.description[:50]}...")
            print('-' * 80)
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}')
    finally:
        session.close()

if __name__ == '__main__':
    init_database()
    check_database()